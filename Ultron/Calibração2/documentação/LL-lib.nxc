/************************************************************************/
/*                                                                      */
/* Program Name: LL-lib.nxc */
/* =============================                                        */
/*                                                                      */
/* Copyright (c) 2008 by mindsensors.com                                */
/* Email: info (<at>) mindsensors (<dot>) com                           */
/*                                                                      */
/* This program is free software. You can redistribute it and/or modify */
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation; version 3 of the License.              */
/* Read the license at: http://www.gnu.org/licenses/gpl.txt             */
/*                                                                      */
/************************************************************************/
/*
 * When        Who             Comments
 * 03/16/09    Deepak Patil    Initial authoring.
 */
 /*
 NXT I2C register storage
 location      Rd  contents Wr  contents
 0-7     V1.0 -
 8-f     mndsnsrs -
 10-18     LineLdr -

 0x40
 0x41       command

 0x42  steering; -
 0x43  avg_result; 

 0x44 result;   // sensor bit values.
 0x45 Set_point;  user settable average.
 0x46 Kp -  100
 0x47 Ki -  0
 0x48 Kd -  50

 0x49-0x50 sensor_voltage[8];
 0x51-0x58 White_limit[8];
 0x59- 0x60 Black_limit[8];
 0x61 - PID Factor

 commands
 B for black calibration
 D sensor power down
 E European frequency
 I invert color
 R Reset Inversion
 P power on sensor
 U US frequency
 S setpoint based on snapshot (automatically sets invert if needed)
 W White balance

 */

#define LL_READ_STEERING 0x42
#define LL_READ_AVERAGE  0X43
#define LL_READ_RESULT   0X44

#define LL_VALUE_SETPOINT 0x45
#define LL_VALUE_KP 0x46
#define LL_VALUE_KI 0X47
#define LL_VALUE_KD 0X48

#define LL_FACTOR_KP 0x61
#define LL_FACTOR_KI 0X62
#define LL_FACTOR_KD 0X63

string LL_format_hex ( byte loop )
{
  int j;
  string s;
  int b = 0xF0;
  int a = 0x0F;

  j = (loop&b)>>4;

  s = "";
  switch ( j ) {
  case 1:
      s += "1";
      break;
  case 2:
      s += "2";
      break;
  case 3:
      s += "3";
      break;
  case 4:
      s += "4";
      break;
  case 5:
      s += "5";
      break;
  case 6:
      s += "6";
      break;
  case 7:
      s += "7";
      break;
  case 8:
      s += "8";
      break;
  case 9:
      s += "9";
      break;
  case 10:
      s += "A";
      break;
  case 11:
      s += "B";
      break;
  case 12:
      s += "C";
      break;
  case 13:
      s += "D";
      break;
  case 14:
      s += "E";
      break;
  case 15:
      s += "F";
      break;
  case 16:
      s += "0";
      break;
  case 0:
      s += "0";
      break;
  }

  j = loop&a;

  switch ( j ) {
  case 1:
      s += "1";
      break;
  case 2:
      s += "2";
      break;
  case 3:
      s += "3";
      break;
  case 4:
      s += "4";
      break;
  case 5:
      s += "5";
      break;
  case 6:
      s += "6";
      break;
  case 7:
      s += "7";
      break;
  case 8:
      s += "8";
      break;
  case 9:
      s += "9";
      break;
  case 10:
      s += "A";
      break;
  case 11:
      s += "B";
      break;
  case 12:
      s += "C";
      break;
  case 13:
      s += "D";
      break;
  case 14:
      s += "E";
      break;
  case 15:
      s += "F";
      break;
  case 16:
      s += "0";
      break;
  case 0:
      s += "0";
      break;
  } 
  return (s);
}

int LL_weighted_average (int i)
{
  int s, j, c;
  int b = 0x80; s = 0;
	c = 0;
  for ( j = 0; j < 8; j++) {
    if ( i&b ) {
      s += (j+1) * 10;
			c++;
    } 
    b = b>>1;
  }
	return (s/c);
}

string LL_format_bin ( int i ) {
  string s;

  int j;
  int b = 0x80;
  s = "";
  for ( j = 0; j < 8; j++) {
    if ( i&b ) {
      s += NumToStr(1);
    } else {
      s += NumToStr(0);
    }
    b = b>>1;
  }
  return (s);
}

byte LL_Write_KP(byte port, byte i2cAddr, byte data, byte factor)
{
  byte cmdbuf[];
	byte loop;
  byte nByteReady = 0;
	byte  n;

  ArrayBuild(cmdbuf, i2cAddr, LL_VALUE_KP, data);

  loop = STAT_COMM_PENDING;
  while ( loop == STAT_COMM_PENDING ) {
    loop = I2CStatus(port, nByteReady);
  }

  // when the I2C bus is ready, send the message you built
  n = I2CWrite(port, 1, cmdbuf);
  loop = STAT_COMM_PENDING;
  while ( loop == STAT_COMM_PENDING ) {
    loop = I2CStatus(port, nByteReady);
  }

	// 0 is not acceptable factor.
	if ( factor == 0 ) {
	  factor = 1;
	}
  ArrayBuild(cmdbuf, i2cAddr, LL_FACTOR_KP, factor);

  loop = STAT_COMM_PENDING;
  while ( loop == STAT_COMM_PENDING ) {
    loop = I2CStatus(port, nByteReady);
  }

  // when the I2C bus is ready, send the message you built
  n = I2CWrite(port, 1, cmdbuf);
  loop = STAT_COMM_PENDING;
  while ( loop == STAT_COMM_PENDING ) {
    loop = I2CStatus(port, nByteReady);
  }
	return n;
}

byte LL_Write_KI(byte port, byte i2cAddr, byte data, byte factor)
{
  byte cmdbuf[];
	byte loop;
  byte nByteReady = 0;
	byte  n;

  ArrayBuild(cmdbuf, i2cAddr, LL_VALUE_KI, data);

  loop = STAT_COMM_PENDING;
  while ( loop == STAT_COMM_PENDING ) {
    loop = I2CStatus(port, nByteReady);
  }

  // when the I2C bus is ready, send the message you built
  n = I2CWrite(port, 1, cmdbuf);
  loop = STAT_COMM_PENDING;
  while ( loop == STAT_COMM_PENDING ) {
    loop = I2CStatus(port, nByteReady);
  }

	// 0 is not acceptable factor.
	if ( factor == 0 ) {
	  factor = 1;
	}
  ArrayBuild(cmdbuf, i2cAddr, LL_FACTOR_KI, factor);

  loop = STAT_COMM_PENDING;
  while ( loop == STAT_COMM_PENDING ) {
    loop = I2CStatus(port, nByteReady);
  }

  // when the I2C bus is ready, send the message you built
  n = I2CWrite(port, 1, cmdbuf);
  loop = STAT_COMM_PENDING;
  while ( loop == STAT_COMM_PENDING ) {
    loop = I2CStatus(port, nByteReady);
  }
	return n;
}

byte LL_Write_KD(byte port, byte i2cAddr, byte data, byte factor)
{
  byte cmdbuf[];
	byte loop;
  byte nByteReady = 0;
	byte  n;

  ArrayBuild(cmdbuf, i2cAddr, LL_VALUE_KD, data);

  loop = STAT_COMM_PENDING;
  while ( loop == STAT_COMM_PENDING ) {
    loop = I2CStatus(port, nByteReady);
  }

  // when the I2C bus is ready, send the message you built
  n = I2CWrite(port, 1, cmdbuf);
  loop = STAT_COMM_PENDING;
  while ( loop == STAT_COMM_PENDING ) {
    loop = I2CStatus(port, nByteReady);
  }

	// 0 is not acceptable factor.
	if ( factor == 0 ) {
	  factor = 1;
	}
  ArrayBuild(cmdbuf, i2cAddr, LL_FACTOR_KD, factor);

  loop = STAT_COMM_PENDING;
  while ( loop == STAT_COMM_PENDING ) {
    loop = I2CStatus(port, nByteReady);
  }

  // when the I2C bus is ready, send the message you built
  n = I2CWrite(port, 1, cmdbuf);
  loop = STAT_COMM_PENDING;
  while ( loop == STAT_COMM_PENDING ) {
    loop = I2CStatus(port, nByteReady);
  }
	return n;
}

byte LL_WriteSetpoint(byte port, byte i2cAddr, byte data)
{
  byte cmdbuf[];
	byte loop;
  byte nByteReady = 0;
	byte  n;

  ArrayBuild(cmdbuf, i2cAddr, LL_VALUE_SETPOINT, data);

  loop = STAT_COMM_PENDING;
  while ( loop == STAT_COMM_PENDING ) {
    loop = I2CStatus(port, nByteReady);
  }

  // when the I2C bus is ready, send the message you built
  n = I2CWrite(port, 1, cmdbuf);
  loop = STAT_COMM_PENDING;
  while ( loop == STAT_COMM_PENDING ) {
    loop = I2CStatus(port, nByteReady);
  }
	return n;
}

byte LL_ReadSteering (byte port, byte i2cAddr)
{
  byte message[];
  unsigned byte buf[20];
  int count;
  byte nByteReady = 0;

  ArrayBuild(message, i2cAddr, LL_READ_STEERING);
  while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);
  count = 1;
  if(I2CBytes(port, message, count, buf)) {
    return buf[0];
	}
	return 0;
}

int LL_SendCommand(byte port, byte addr, byte cmd)
{
  byte cmdBuf[];
  byte nByteReady = 0;

  ArrayBuild(cmdBuf, addr, 0x41, cmd);
  I2CWrite(port, 0, cmdBuf);
  while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);
  int status = I2CCheckStatus(port);
  while (status > NO_ERR)
    status = I2CCheckStatus(port);
  return status;
}

/**
 * The LineLeader sensor can be put to sleep, so that
 * it's not consuming power when it is not required.
 *
 * It wakes up on it's own when any i2c communication happens.
 * Or you can specifically wake it up by 'P' command.
 */
int LL_Sleep(byte port, byte addr)
{
  return LL_SendCommand(port, addr, 'D');
}

/**
 * The LineLeader sensor can be put to sleep, so that
 * it's not consuming power when it is not required.
 *
 * It wakes up on it's own when any i2c communication happens.
 * Or you can specifically wake it up by 'P' command.
 */
int LL_WakeUp(byte port, byte addr)
{
  return LL_SendCommand(port, addr, 'P');
}

/**
 * This function inverts sensing for white line on dark background
 *
 */
int LL_InvertLineColorToWhite(byte port, byte addr)
{
  return LL_SendCommand(port, addr, 'I');
}

/**
 * This function resets inversion (if any)
 * to default (black line on light background)
 */
int LL_ResetColorInversion(byte port, byte addr)
{
  return LL_SendCommand(port, addr, 'R');
}

/**
 * This function takes a snapshot of the line under the sensor
 * and tracks that position in subsequent tracking operations.
 * Also this function will set inversion if it sees white line
 * on dark background
 */
int LL_TakeSnapshot(byte port, byte addr)
{
  return LL_SendCommand(port, addr, 'S');
}

/**
 * Read any byte from LL.
 */
byte LL_Read (byte port, byte i2cAddr, int reg_to_read)
{
  byte message[];
  unsigned byte buf[20];
  int count, l;
  byte nByteReady = 0;

  ArrayBuild(message, i2cAddr, reg_to_read);
  while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);
  count = 1;
  if(I2CBytes(port, message, count, buf)) {
    return buf[0];
	}
	return 0;
}

byte LL_ReadPIDFactor_KP(byte port, byte i2cAddr)
{
  return ( LL_Read(port, i2cAddr, LL_FACTOR_KP));
}
byte LL_ReadPIDFactor_KI(byte port, byte i2cAddr)
{
  return ( LL_Read(port, i2cAddr, LL_FACTOR_KI));
}
byte LL_ReadPIDFactor_KD(byte port, byte i2cAddr)
{
  return ( LL_Read(port, i2cAddr, LL_FACTOR_KD));
}

int LL_ReadRaw_Calibrated (byte port, byte i2cAddr, byte &returnValue[])
{
  byte message[];
  unsigned byte buf[8];
  int count, l;
  byte nByteReady = 0;

	// calibrated readings are at 0x49
  ArrayBuild(message, i2cAddr, 0x49);
  while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);
  count = 8;
  if(I2CBytes(port, message, count, returnValue)) {
	  return 1;
	}
	return 0;

}

// following function is supported in firmware version 1.15 and later.
int LL_ReadRaw_Uncalibrated (byte port, byte i2cAddr, int &returnValue[])
{
  byte message[];
  unsigned byte buf[16];
  int count, i;
  byte nByteReady = 0;

	// uncalibrated readings are at 0x74  
  ArrayBuild(message, i2cAddr, 0x74);
  while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);
  count = 8;  // read 8 bytes at once.
  if(I2CBytes(port, message, count, buf)) {
		for ( i=0; i < 4; i++) {
		  returnValue[i] = buf[i*2] + (buf[(i*2)+1]<<8);
		}
	}
  ArrayBuild(message, i2cAddr, 0x7C);
  while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);
  count = 8;  // read 8 bytes at once.
  if(I2CBytes(port, message, count, buf)) {
		for ( i=0; i < 4; i++) {
		  returnValue[i+4] = buf[i*2] + (buf[(i*2)+1]<<8);
		}
	  return 1;
	}

	return 0;

}
